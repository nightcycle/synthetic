[{"title":"Dialog","type":0,"sectionRef":"#","url":"api/Dialog","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Dialog","url":"api/Dialog#properties","content":" "},{"title":"HeaderTypography​","type":1,"pageTitle":"Dialog","url":"api/Dialog#HeaderTypography","content":"&lt;/&gt; Dialog.HeaderTypography: Typography | FusionState | nil The Typography to be used for this component's header text  "},{"title":"BodyTypography​","type":1,"pageTitle":"Dialog","url":"api/Dialog#BodyTypography","content":"&lt;/&gt; Dialog.BodyTypography: Typography | FusionState | nil The Typography to be used for this component's body text  "},{"title":"ButtonTypography​","type":1,"pageTitle":"Dialog","url":"api/Dialog#ButtonTypography","content":"&lt;/&gt; Dialog.ButtonTypography: Typography | FusionState | nil The Typography to be used for this component's button text  "},{"title":"HeaderText​","type":1,"pageTitle":"Dialog","url":"api/Dialog#HeaderText","content":"&lt;/&gt; Dialog.HeaderText: string | FusionState | nil The text used in the header  "},{"title":"BodyText​","type":1,"pageTitle":"Dialog","url":"api/Dialog#BodyText","content":"&lt;/&gt; Dialog.BodyText: string | FusionState | nil The text used in the body  "},{"title":"Button1Text​","type":1,"pageTitle":"Dialog","url":"api/Dialog#Button1Text","content":"&lt;/&gt; Dialog.Button1Text: string | FusionState | nil The text used in the left button, typically the disagree / deny option  "},{"title":"Button2Text​","type":1,"pageTitle":"Dialog","url":"api/Dialog#Button2Text","content":"&lt;/&gt; Dialog.Button2Text: string | FusionState | nil The text used in the left button, typically the agree / confirm option  "},{"title":"BackgroundColor​","type":1,"pageTitle":"Dialog","url":"api/Dialog#BackgroundColor","content":"&lt;/&gt; Dialog.BackgroundColor: Color3 | FusionState | nil Color used for background  "},{"title":"Color​","type":1,"pageTitle":"Dialog","url":"api/Dialog#Color","content":"&lt;/&gt; Dialog.Color: Color3 | FusionState | nil Color used for highlighting things, in this case button text  "},{"title":"TextColor​","type":1,"pageTitle":"Dialog","url":"api/Dialog#TextColor","content":"&lt;/&gt; Dialog.TextColor: Color3 | FusionState | nil Color used for body &amp; header text  "},{"title":"Enabled​","type":1,"pageTitle":"Dialog","url":"api/Dialog#Enabled","content":"&lt;/&gt; Dialog.Enabled: bool | FusionState | nil Whether the prompt is currently displaying &amp; darkening the background  "},{"title":"SynthClassName​","type":1,"pageTitle":"Dialog","url":"api/Dialog#SynthClassName","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Dialog.SynthClassName: string Read-Only attribute used to identify what type of component it is "},{"title":"Functions​","type":1,"pageTitle":"Dialog","url":"api/Dialog#functions","content":" "},{"title":"OnSelect:Connect​","type":1,"pageTitle":"Dialog","url":"api/Dialog#OnSelect:Connect","content":"&lt;/&gt; Dialog.OnSelect:Connect() → () Creates a signal that fires when a choice is clicked "},{"title":"Effects","type":0,"sectionRef":"#","url":"api/Effects","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Effects","url":"api/Effects#functions","content":" "},{"title":"ripple​","type":1,"pageTitle":"Effects","url":"api/Effects#ripple","content":"&lt;/&gt; Effects.ripple( Position: FusionState,-- A UDim2 containing FusionState showing the desired target position Color: FusionState-- A Color3 containing FusionState showing the desired ripple color ) → () Plays a ripple effect  "},{"title":"sound​","type":1,"pageTitle":"Effects","url":"api/Effects#sound","content":"&lt;/&gt; Effects.sound( Key: SoundKey-- creates a new sound based on the filename of the official material sounds. ) → () Plays a sound effect  "},{"title":"menu​","type":1,"pageTitle":"Effects","url":"api/Effects#menu","content":"&lt;/&gt; Effects.menu( maid: Maid,-- maid that will be called upon menu completion to clean up Parameters: {any},-- miscellaneous menu parameters HostSizeState: FusionState,-- fusionState of the Vector2 of the host's absolute size HostPositionState: FusionState-- fusionState of the Vector2 of the host's absolute position ) → () Creates and returns a dropdown menu, this honestly should just be a Component  "},{"title":"tip​","type":1,"pageTitle":"Effects","url":"api/Effects#tip","content":"&lt;/&gt; Effects.tip( maid: Maid,-- maid that will be called upon menu completion to clean up Parameters: {any},-- miscellaneous menu parameters HostSizeState: FusionState,-- fusionState of the Vector2 of the host's absolute size HostPositionState: FusionState,-- fusionState of the Vector2 of the host's absolute position PreferredDirection: FusionState-- fusionState of the Vector2 of the host's anchor point to be used ) → () Creates and places Tooltips. "},{"title":"ExpansionPanel","type":0,"sectionRef":"#","url":"api/ExpansionPanel","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ExpansionPanel","url":"api/ExpansionPanel#properties","content":" "},{"title":"Typography​","type":1,"pageTitle":"ExpansionPanel","url":"api/ExpansionPanel#Typography","content":"&lt;/&gt; ExpansionPanel.Typography: Typography | FusionState | nil The Typography to be used for this component  "},{"title":"Text​","type":1,"pageTitle":"ExpansionPanel","url":"api/ExpansionPanel#Text","content":"&lt;/&gt; ExpansionPanel.Text: string | FusionState | nil Text that fills the top of the panel and explains its purpose.  "},{"title":"BackgroundColor​","type":1,"pageTitle":"ExpansionPanel","url":"api/ExpansionPanel#BackgroundColor","content":"&lt;/&gt; ExpansionPanel.BackgroundColor: Color3 | FusionState | nil Color used for background of panel  "},{"title":"TextColor​","type":1,"pageTitle":"ExpansionPanel","url":"api/ExpansionPanel#TextColor","content":"&lt;/&gt; ExpansionPanel.TextColor: Color3 | FusionState | nil Color used for text  "},{"title":"Width​","type":1,"pageTitle":"ExpansionPanel","url":"api/ExpansionPanel#Width","content":"&lt;/&gt; ExpansionPanel.Width: UDim | FusionState | nil Width of the entire component, as Height is solved using AutomaticScaling  "},{"title":"Open​","type":1,"pageTitle":"ExpansionPanel","url":"api/ExpansionPanel#Open","content":"&lt;/&gt; ExpansionPanel.Open: bool | FusionState | nil Whether the panel is currently open  "},{"title":"SynthClassName​","type":1,"pageTitle":"ExpansionPanel","url":"api/ExpansionPanel#SynthClassName","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ExpansionPanel.SynthClassName: string Attribute used to identify what type of component it is "},{"title":"Display","type":0,"sectionRef":"#","url":"api/Display","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Display","url":"api/Display#properties","content":" "},{"title":"CameraPosition​","type":1,"pageTitle":"Display","url":"api/Display#CameraPosition","content":"&lt;/&gt; Display.CameraPosition: Vector3 | FusionState | nil The camera position in the ViewportFrame  "},{"title":"CameraXVector​","type":1,"pageTitle":"Display","url":"api/Display#CameraXVector","content":"&lt;/&gt; Display.CameraXVector: Vector3 | FusionState | nil The XVector of the camera CFrame  "},{"title":"CameraYVector​","type":1,"pageTitle":"Display","url":"api/Display#CameraYVector","content":"&lt;/&gt; Display.CameraYVector: Vector3 | FusionState | nil The YVector of the camera CFrame  "},{"title":"CameraZVector​","type":1,"pageTitle":"Display","url":"api/Display#CameraZVector","content":"&lt;/&gt; Display.CameraZVector: Vector3 | FusionState | nil The ZVector of the camera CFrame  "},{"title":"CameraZVector​","type":1,"pageTitle":"Display","url":"api/Display#CameraZVector","content":"&lt;/&gt; Display.CameraZVector: Vector3 | FusionState | nil The light direction of the ViewportFrame  "},{"title":"LightColor​","type":1,"pageTitle":"Display","url":"api/Display#LightColor","content":"&lt;/&gt; Display.LightColor: Color3 | FusionState | nil The color of the ViewportFrame light  "},{"title":"Ambient​","type":1,"pageTitle":"Display","url":"api/Display#Ambient","content":"&lt;/&gt; Display.Ambient: Color3 | FusionState | nil The color of the ViewportFrame ambient  "},{"title":"FOV​","type":1,"pageTitle":"Display","url":"api/Display#FOV","content":"&lt;/&gt; Display.FOV: number | FusionState | nil The vertical Field of View for the camera in degrees  "},{"title":"SynthClassName​","type":1,"pageTitle":"Display","url":"api/Display#SynthClassName","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Display.SynthClassName: string Read-Only attribute used to identify what type of component it is "},{"title":"Functions​","type":1,"pageTitle":"Display","url":"api/Display#functions","content":" "},{"title":"ClearScene:Fire​","type":1,"pageTitle":"Display","url":"api/Display#ClearScene:Fire","content":"&lt;/&gt; Display.ClearScene:Fire() → () Removes all added instances from current scene  "},{"title":"HideScene:Fire​","type":1,"pageTitle":"Display","url":"api/Display#HideScene:Fire","content":"&lt;/&gt; Display.HideScene:Fire() → () Temporarily pauses and hides all instances, good to do for performance when an element is unused  "},{"title":"ShowScene:Fire​","type":1,"pageTitle":"Display","url":"api/Display#ShowScene:Fire","content":"&lt;/&gt; Display.ShowScene:Fire() → () Unpauses and reveals all instances, undoes HideScene  "},{"title":"InsertHumanoid:Invoke​","type":1,"pageTitle":"Display","url":"api/Display#InsertHumanoid:Invoke","content":"&lt;/&gt; Display.InsertHumanoid:Invoke( CharacterModel: Instance ,-- the model of the humanoid containing character FPS: number | nil-- the rate at which the ViewportFrame will attempt to update character animations ) → ViewportFrameController Adds a humanoid character model to the ViewportFrame  "},{"title":"InsertBasePart:Invoke​","type":1,"pageTitle":"Display","url":"api/Display#InsertBasePart:Invoke","content":"&lt;/&gt; Display.InsertBasePart:Invoke( Part: Instance ,-- the BasePart instance FPS: number | nil-- the rate at which the ViewportFrame will attempt to update the part's location ) → ViewportFrameController Adds a BasePart to the ViewportFrame  "},{"title":"InsertModel:Invoke​","type":1,"pageTitle":"Display","url":"api/Display#InsertModel:Invoke","content":"&lt;/&gt; Display.InsertModel:Invoke( Model: Model ,-- the BasePart instance FPS: number | nil-- the rate at which the ViewportFrame will attempt to update the model ) → ViewportFrameController Adds a Model to the ViewportFrame "},{"title":"Divider","type":0,"sectionRef":"#","url":"api/Divider","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Divider","url":"api/Divider#properties","content":" "},{"title":"Color​","type":1,"pageTitle":"Divider","url":"api/Divider#Color","content":"&lt;/&gt; Divider.Color: Color3 | FusionState | nil The color of the divider line  "},{"title":"Typography​","type":1,"pageTitle":"Divider","url":"api/Divider#Typography","content":"&lt;/&gt; Divider.Typography: Typography | FusionState | nil The Typography to be used to determine padding  "},{"title":"Direction​","type":1,"pageTitle":"Divider","url":"api/Divider#Direction","content":"&lt;/&gt; Divider.Direction: DividerDirection | FusionState | nil The direction the divider will be displayed  "},{"title":"SynthClassName​","type":1,"pageTitle":"Divider","url":"api/Divider#SynthClassName","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Divider.SynthClassName: string Read-Only attribute used to identify what type of component it is "},{"title":"Label","type":0,"sectionRef":"#","url":"api/Label","content":"On this page Label ComponentAtom The text &amp; icon combo used within the Button component among others","keywords":""},{"title":"Checkbox","type":0,"sectionRef":"#","url":"api/Checkbox","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Checkbox","url":"api/Checkbox#properties","content":" "},{"title":"Color​","type":1,"pageTitle":"Checkbox","url":"api/Checkbox#Color","content":"&lt;/&gt; Checkbox.Color: Color3 | FusionState | nil Color used for fill of checkbox  "},{"title":"LineColor​","type":1,"pageTitle":"Checkbox","url":"api/Checkbox#LineColor","content":"&lt;/&gt; Checkbox.LineColor: Color3 | FusionState | nil Color used for fill of checkbox  "},{"title":"Input​","type":1,"pageTitle":"Checkbox","url":"api/Checkbox#Input","content":"&lt;/&gt; Checkbox.Input: bool | FusionState | nil Whether the Checkbox is true or false  "},{"title":"Typography​","type":1,"pageTitle":"Checkbox","url":"api/Checkbox#Typography","content":"&lt;/&gt; Checkbox.Typography: Typography | FusionState | nil The Typography to be used for this component  "},{"title":"Value​","type":1,"pageTitle":"Checkbox","url":"api/Checkbox#Value","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Checkbox.Value: bool Attribute used to communicate current value  "},{"title":"SynthClassName​","type":1,"pageTitle":"Checkbox","url":"api/Checkbox#SynthClassName","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Checkbox.SynthClassName: string Attribute used to identify what type of component it is "},{"title":"ProgressBar","type":0,"sectionRef":"#","url":"api/ProgressBar","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ProgressBar","url":"api/ProgressBar#properties","content":" "},{"title":"KnobEnabled​","type":1,"pageTitle":"ProgressBar","url":"api/ProgressBar#KnobEnabled","content":"&lt;/&gt; ProgressBar.KnobEnabled: bool | FusionState | nil Whether the boundary between filled and unfilled is covered by a round knob element  "},{"title":"LockKnobColor​","type":1,"pageTitle":"ProgressBar","url":"api/ProgressBar#LockKnobColor","content":"&lt;/&gt; ProgressBar.LockKnobColor: bool | FusionState | nil Whether the knob changes color as the progress bar changes value  "},{"title":"BarPadding​","type":1,"pageTitle":"ProgressBar","url":"api/ProgressBar#BarPadding","content":"&lt;/&gt; ProgressBar.BarPadding: UDim | FusionState | nil How much padding between the bar and the knob  "},{"title":"Padding​","type":1,"pageTitle":"ProgressBar","url":"api/ProgressBar#Padding","content":"&lt;/&gt; ProgressBar.Padding: UDim | FusionState | nil How much padding between the knob and the component frame boundary  "},{"title":"Saturation​","type":1,"pageTitle":"ProgressBar","url":"api/ProgressBar#Saturation","content":"&lt;/&gt; ProgressBar.Saturation: number | FusionState | nil How saturated the unfilled area of the bar is  "},{"title":"Color​","type":1,"pageTitle":"ProgressBar","url":"api/ProgressBar#Color","content":"&lt;/&gt; ProgressBar.Color: Color3 | FusionState | nil Color used for filled area of progress bar  "},{"title":"BackgroundColor​","type":1,"pageTitle":"ProgressBar","url":"api/ProgressBar#BackgroundColor","content":"&lt;/&gt; ProgressBar.BackgroundColor: Color3 | FusionState | nil Color used for unfilled area of progress bar  "},{"title":"Notches​","type":1,"pageTitle":"ProgressBar","url":"api/ProgressBar#Notches","content":"&lt;/&gt; ProgressBar.Notches: number | FusionState | nil How many values are available within progress bar  "},{"title":"Input​","type":1,"pageTitle":"ProgressBar","url":"api/ProgressBar#Input","content":"&lt;/&gt; ProgressBar.Input: number | FusionState | nil The point between the max &amp; min values that the slider current represents  "},{"title":"Value​","type":1,"pageTitle":"ProgressBar","url":"api/ProgressBar#Value","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ProgressBar.Value: number The the notch rounded value currently solved for by input  "},{"title":"SynthClassName​","type":1,"pageTitle":"ProgressBar","url":"api/ProgressBar#SynthClassName","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ProgressBar.SynthClassName: string Read-Only attribute used to identify what type of component it is "},{"title":"Functions​","type":1,"pageTitle":"ProgressBar","url":"api/ProgressBar#functions","content":" "},{"title":"OnChange:Connect​","type":1,"pageTitle":"ProgressBar","url":"api/ProgressBar#OnChange:Connect","content":"&lt;/&gt; ProgressBar.OnChange:Connect() → () Creates a signal that fires when the progress bar value changes "},{"title":"PropertyFrame","type":0,"sectionRef":"#","url":"api/PropertyFrame","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"PropertyFrame","url":"api/PropertyFrame#properties","content":" "},{"title":"Typography​","type":1,"pageTitle":"PropertyFrame","url":"api/PropertyFrame#Typography","content":"&lt;/&gt; PropertyFrame.Typography: Typography | FusionState | nil The Typography to be used for this component  "},{"title":"Text​","type":1,"pageTitle":"PropertyFrame","url":"api/PropertyFrame#Text","content":"&lt;/&gt; PropertyFrame.Text: string | FusionState | nil Text that fills the left side of the frame  "},{"title":"TextColor​","type":1,"pageTitle":"PropertyFrame","url":"api/PropertyFrame#TextColor","content":"&lt;/&gt; PropertyFrame.TextColor: Color3 | FusionState | nil Color used for text  "},{"title":"Text​","type":1,"pageTitle":"PropertyFrame","url":"api/PropertyFrame#Text","content":"&lt;/&gt; PropertyFrame.Text: any | FusionState | nil Whatever value will be passed on to any component with an Input field under the Content frame  "},{"title":"DividerEnabled​","type":1,"pageTitle":"PropertyFrame","url":"api/PropertyFrame#DividerEnabled","content":"&lt;/&gt; PropertyFrame.DividerEnabled: bool | FusionState | nil Whether a divider is placed below the property frame  "},{"title":"Value​","type":1,"pageTitle":"PropertyFrame","url":"api/PropertyFrame#Value","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; PropertyFrame.Value: any The value resultant of the input  "},{"title":"SynthClassName​","type":1,"pageTitle":"PropertyFrame","url":"api/PropertyFrame#SynthClassName","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; PropertyFrame.SynthClassName: string Read-Only attribute used to identify what type of component it is "},{"title":"Menu","type":0,"sectionRef":"#","url":"api/Menu","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Menu","url":"api/Menu#properties","content":" "},{"title":"Typography​","type":1,"pageTitle":"Menu","url":"api/Menu#Typography","content":"&lt;/&gt; Menu.Typography: Typography | FusionState | nil The Typography to be used for this component  "},{"title":"BackgroundColor​","type":1,"pageTitle":"Menu","url":"api/Menu#BackgroundColor","content":"&lt;/&gt; Menu.BackgroundColor: Color3 | FusionState | nil Color used for background of menu  "},{"title":"Color​","type":1,"pageTitle":"Menu","url":"api/Menu#Color","content":"&lt;/&gt; Menu.Color: Color3 | FusionState | nil Color used to add texture to component  "},{"title":"TextColor​","type":1,"pageTitle":"Menu","url":"api/Menu#TextColor","content":"&lt;/&gt; Menu.TextColor: Color3 | FusionState | nil Color used for text  "},{"title":"Width​","type":1,"pageTitle":"Menu","url":"api/Menu#Width","content":"&lt;/&gt; Menu.Width: UDim | FusionState | nil Width of the entire component, as Height is solved using Typography  "},{"title":"Options​","type":1,"pageTitle":"Menu","url":"api/Menu#Options","content":"&lt;/&gt; Menu.Options: {string} | FusionState | nil A list of options that can be selected from  "},{"title":"Open​","type":1,"pageTitle":"Menu","url":"api/Menu#Open","content":"&lt;/&gt; Menu.Open: bool | FusionState | nil Whether the menu is currently open  "},{"title":"SynthClassName​","type":1,"pageTitle":"Menu","url":"api/Menu#SynthClassName","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Menu.SynthClassName: string Attribute used to identify what type of component it is "},{"title":"Functions​","type":1,"pageTitle":"Menu","url":"api/Menu#functions","content":" "},{"title":"OnSelect:Connect​","type":1,"pageTitle":"Menu","url":"api/Menu#OnSelect:Connect","content":"&lt;/&gt; Menu.OnSelect:Connect() → () Creates a signal that fires when an option is clicked "},{"title":"Button","type":0,"sectionRef":"#","url":"api/Button","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Button","url":"api/Button#properties","content":" "},{"title":"Typography​","type":1,"pageTitle":"Button","url":"api/Button#Typography","content":"&lt;/&gt; Button.Typography: Typography | FusionState | nil The Typography to be used for this component  "},{"title":"Text​","type":1,"pageTitle":"Button","url":"api/Button#Text","content":"&lt;/&gt; Button.Text: string | FusionState | nil Text that fills the label  "},{"title":"Color​","type":1,"pageTitle":"Button","url":"api/Button#Color","content":"&lt;/&gt; Button.Color: Color3 | FusionState | nil Color used for text  "},{"title":"Image​","type":1,"pageTitle":"Button","url":"api/Button#Image","content":"&lt;/&gt; Button.Image: string | FusionState | nil Roblox Asset URL used to load in an icon's custom texture. If left nil an image won't be created.  "},{"title":"ImageRectSize​","type":1,"pageTitle":"Button","url":"api/Button#ImageRectSize","content":"&lt;/&gt; Button.ImageRectSize: Vector2 | FusionState | nil How big the icon's sprite-sheet cells are  "},{"title":"ImageRectOffset​","type":1,"pageTitle":"Button","url":"api/Button#ImageRectOffset","content":"&lt;/&gt; Button.ImageRectOffset: Vector2 | FusionState | nil What position on a sprite-sheet should an icon be grabbed from  "},{"title":"SynthClassName​","type":1,"pageTitle":"Button","url":"api/Button#SynthClassName","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Button.SynthClassName: string Read-Only attribute used to identify what type of component it is  "},{"title":"ButtonVariant​","type":1,"pageTitle":"Button","url":"api/Button#ButtonVariant","content":"&lt;/&gt; Button.ButtonVariant: ButtonVariant | FusionState | nil The style of construction as detailed here, excluding &quot;Toggle button&quot;  "},{"title":"Typography​","type":1,"pageTitle":"Button","url":"api/Button#Typography","content":"&lt;/&gt; Button.Typography: Typography | FusionState | nil The Typography to be used for this component  "},{"title":"Text​","type":1,"pageTitle":"Button","url":"api/Button#Text","content":"&lt;/&gt; Button.Text: string | FusionState | nil Text that fills the button  "},{"title":"Tooltip​","type":1,"pageTitle":"Button","url":"api/Button#Tooltip","content":"&lt;/&gt; Button.Tooltip: string | FusionState | nil Text that appears when the cursor hovers over button  "},{"title":"TooltipDirection​","type":1,"pageTitle":"Button","url":"api/Button#TooltipDirection","content":"&lt;/&gt; Button.TooltipDirection: string | FusionState | nil What anchor point on the button should be used to display  "},{"title":"Color​","type":1,"pageTitle":"Button","url":"api/Button#Color","content":"&lt;/&gt; Button.Color: Color3 | FusionState | nil Color used for non-text areas of button  "},{"title":"TextColor​","type":1,"pageTitle":"Button","url":"api/Button#TextColor","content":"&lt;/&gt; Button.TextColor: Color3 | FusionState | nil Color used for text  "},{"title":"Image​","type":1,"pageTitle":"Button","url":"api/Button#Image","content":"&lt;/&gt; Button.Image: string | FusionState | nil Roblox Asset URL used to load in an icon's custom texture. If left nil an image won't be created.  "},{"title":"ImageRectSize​","type":1,"pageTitle":"Button","url":"api/Button#ImageRectSize","content":"&lt;/&gt; Button.ImageRectSize: Vector2 | FusionState | nil How big the icon's sprite-sheet cells are  "},{"title":"ImageRectOffset​","type":1,"pageTitle":"Button","url":"api/Button#ImageRectOffset","content":"&lt;/&gt; Button.ImageRectOffset: Vector2 | FusionState | nil What position on a sprite-sheet should an icon be grabbed from  "},{"title":"SynthClassName​","type":1,"pageTitle":"Button","url":"api/Button#SynthClassName","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Button.SynthClassName: string Read-Only attribute used to identify what type of component it is "},{"title":"Switch","type":0,"sectionRef":"#","url":"api/Switch","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Switch","url":"api/Switch#properties","content":" "},{"title":"Color​","type":1,"pageTitle":"Switch","url":"api/Switch#Color","content":"&lt;/&gt; Switch.Color: Color3 | FusionState | nil Color used for activated state  "},{"title":"BackgroundColor​","type":1,"pageTitle":"Switch","url":"api/Switch#BackgroundColor","content":"&lt;/&gt; Switch.BackgroundColor: Color3 | FusionState | nil Color used for off state  "},{"title":"Input​","type":1,"pageTitle":"Switch","url":"api/Switch#Input","content":"&lt;/&gt; Switch.Input: bool | FusionState | nil Whether the switch is on or off  "},{"title":"Typography​","type":1,"pageTitle":"Switch","url":"api/Switch#Typography","content":"&lt;/&gt; Switch.Typography: Typography | FusionState | nil The Typography to be used for this component  "},{"title":"Value​","type":1,"pageTitle":"Switch","url":"api/Switch#Value","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Switch.Value: bool Whether the switch is on or off  "},{"title":"SynthClassName​","type":1,"pageTitle":"Switch","url":"api/Switch#SynthClassName","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Switch.SynthClassName: string Attribute used to identify what type of component it is "},{"title":"Slider","type":0,"sectionRef":"#","url":"api/Slider","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Slider","url":"api/Slider#properties","content":" "},{"title":"Typography​","type":1,"pageTitle":"Slider","url":"api/Slider#Typography","content":"&lt;/&gt; Slider.Typography: Typography | FusionState | nil The Typography to be used for this component  "},{"title":"Color​","type":1,"pageTitle":"Slider","url":"api/Slider#Color","content":"&lt;/&gt; Slider.Color: Color3 | FusionState | nil Color used for non-text areas of button  "},{"title":"MinimumValue​","type":1,"pageTitle":"Slider","url":"api/Slider#MinimumValue","content":"&lt;/&gt; Slider.MinimumValue: number | FusionState | nil The lower end of the range the slider goes between, displayed on the left side  "},{"title":"MinimumValue​","type":1,"pageTitle":"Slider","url":"api/Slider#MinimumValue","content":"&lt;/&gt; Slider.MinimumValue: number | FusionState | nil The upper end of the range the slider goes between, displayed on the right side  "},{"title":"Notches​","type":1,"pageTitle":"Slider","url":"api/Slider#Notches","content":"&lt;/&gt; Slider.Notches: number | FusionState | nil How many values are available within slider range  "},{"title":"Input​","type":1,"pageTitle":"Slider","url":"api/Slider#Input","content":"&lt;/&gt; Slider.Input: number | FusionState | nil The point between the max &amp; min values that the slider current represents  "},{"title":"ValueTextEnabled​","type":1,"pageTitle":"Slider","url":"api/Slider#ValueTextEnabled","content":"&lt;/&gt; Slider.ValueTextEnabled: bool | FusionState | nil Whether a tooltip appears above the slider when dragged showing its current value  "},{"title":"Alpha​","type":1,"pageTitle":"Slider","url":"api/Slider#Alpha","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Slider.Alpha: number Describes the current slider as a point between 0 and 1  "},{"title":"Value​","type":1,"pageTitle":"Slider","url":"api/Slider#Value","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Slider.Value: number The final value rounded to the nearest notch  "},{"title":"SynthClassName​","type":1,"pageTitle":"Slider","url":"api/Slider#SynthClassName","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Slider.SynthClassName: string Read-Only attribute used to identify what type of component it is "},{"title":"Dropdown","type":0,"sectionRef":"#","url":"api/Dropdown","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Dropdown","url":"api/Dropdown#properties","content":" "},{"title":"ButtonVariant​","type":1,"pageTitle":"Dropdown","url":"api/Dropdown#ButtonVariant","content":"&lt;/&gt; Dropdown.ButtonVariant: ButtonVariant | FusionState | nil The style of construction as detailed here, excluding &quot;Toggle button&quot;  "},{"title":"Typography​","type":1,"pageTitle":"Dropdown","url":"api/Dropdown#Typography","content":"&lt;/&gt; Dropdown.Typography: Typography | FusionState | nil The Typography to be used for this component  "},{"title":"Input​","type":1,"pageTitle":"Dropdown","url":"api/Dropdown#Input","content":"&lt;/&gt; Dropdown.Input: string | FusionState | nil The value currently filling text field  "},{"title":"Context​","type":1,"pageTitle":"Dropdown","url":"api/Dropdown#Context","content":"&lt;/&gt; Dropdown.Context: string | FusionState | nil The text that goes below field and can provide extra info  "},{"title":"Error​","type":1,"pageTitle":"Dropdown","url":"api/Dropdown#Error","content":"&lt;/&gt; Dropdown.Error: string | FusionState | nil The text for any error message below the field  "},{"title":"Label​","type":1,"pageTitle":"Dropdown","url":"api/Dropdown#Label","content":"&lt;/&gt; Dropdown.Label: string | FusionState | nil The text that fills the blank text field as well as the section above the field when filled  "},{"title":"BackgroundColor​","type":1,"pageTitle":"Dropdown","url":"api/Dropdown#BackgroundColor","content":"&lt;/&gt; Dropdown.BackgroundColor: Color3 | FusionState | nil Color used for background of menu  "},{"title":"Color​","type":1,"pageTitle":"Dropdown","url":"api/Dropdown#Color","content":"&lt;/&gt; Dropdown.Color: Color3 | FusionState | nil Color used to add texture to component  "},{"title":"LineColor​","type":1,"pageTitle":"Dropdown","url":"api/Dropdown#LineColor","content":"&lt;/&gt; Dropdown.LineColor: Color3 | FusionState | nil Color used for lines  "},{"title":"TextColor​","type":1,"pageTitle":"Dropdown","url":"api/Dropdown#TextColor","content":"&lt;/&gt; Dropdown.TextColor: Color3 | FusionState | nil Color used for text  "},{"title":"ErrorColor​","type":1,"pageTitle":"Dropdown","url":"api/Dropdown#ErrorColor","content":"&lt;/&gt; Dropdown.ErrorColor: Color3 | FusionState | nil Color used for error text  "},{"title":"Width​","type":1,"pageTitle":"Dropdown","url":"api/Dropdown#Width","content":"&lt;/&gt; Dropdown.Width: UDim | FusionState | nil Width of the entire component, as Height is solved using Typography  "},{"title":"Options​","type":1,"pageTitle":"Dropdown","url":"api/Dropdown#Options","content":"&lt;/&gt; Dropdown.Options: {string} | FusionState | nil A list of options that can be selected from  "},{"title":"Open​","type":1,"pageTitle":"Dropdown","url":"api/Dropdown#Open","content":"&lt;/&gt; Dropdown.Open: bool | FusionState | nil Whether the menu is currently open  "},{"title":"Value​","type":1,"pageTitle":"Dropdown","url":"api/Dropdown#Value","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Dropdown.Value: bool Attribute used to communicate current value  "},{"title":"SynthClassName​","type":1,"pageTitle":"Dropdown","url":"api/Dropdown#SynthClassName","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Dropdown.SynthClassName: string Attribute used to identify what type of component it is "},{"title":"Synthetic","type":0,"sectionRef":"#","url":"api/Synthetic","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Synthetic","url":"api/Synthetic#properties","content":" "},{"title":"Effects​","type":1,"pageTitle":"Synthetic","url":"api/Synthetic#Effects","content":"&lt;/&gt; Synthetic.Effects: Effects list of useful effects to add interactivity to UI  "},{"title":"Enums​","type":1,"pageTitle":"Synthetic","url":"api/Synthetic#Enums","content":"&lt;/&gt; Synthetic.Enums: SynthEnum dictionary of custom enums used in library  "},{"title":"Util​","type":1,"pageTitle":"Synthetic","url":"api/Synthetic#Util","content":"&lt;/&gt; Synthetic.Util: Util a list of frequently used methods "},{"title":"Functions​","type":1,"pageTitle":"Synthetic","url":"api/Synthetic#functions","content":" "},{"title":"New​","type":1,"pageTitle":"Synthetic","url":"api/Synthetic#New","content":"&lt;/&gt; Synthetic.New( key: string-- The ClassName of SynthClassName of desired Component ) → function-- Returns the constructor used to create instance Gets relevant constructor  "},{"title":"Set​","type":1,"pageTitle":"Synthetic","url":"api/Synthetic#Set","content":"&lt;/&gt; Synthetic.Set( key: string,-- the key the constructor will be organized under constructor: function-- the constructor to be provided by synthetic.New ) → () Registers custom constructor for future use "},{"title":"SynthEnum","type":0,"sectionRef":"#","url":"api/SynthEnum","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"SynthEnum","url":"api/SynthEnum#types","content":" "},{"title":"DividerDirection​","type":1,"pageTitle":"SynthEnum","url":"api/SynthEnum#DividerDirection","content":"&lt;/&gt; interface DividerDirection { Unknown: 0 Vertical: 1 Horizontal: 2 } The SynthEnum used when deciding how to display a divider component  "},{"title":"ButtonVariant​","type":1,"pageTitle":"SynthEnum","url":"api/SynthEnum#ButtonVariant","content":"&lt;/&gt; interface ButtonVariant { Unknown: 0 Filled: 1 Outlined: 2 Text: 3-- Text doesn't always get used } The SynthEnum used when deciding how to display a button component  "},{"title":"ToggleVariant​","type":1,"pageTitle":"SynthEnum","url":"api/SynthEnum#ToggleVariant","content":"&lt;/&gt; interface ToggleVariant { Unknown: 0 RadioButton: 1-- When used in toggle lists only one can be selected at a time Switch: 2 Checkbox: 3 } The SynthEnum used for deciding what toggle element to use within a component "},{"title":"ToggleList","type":0,"sectionRef":"#","url":"api/ToggleList","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ToggleList","url":"api/ToggleList#properties","content":" "},{"title":"HeaderTypography​","type":1,"pageTitle":"ToggleList","url":"api/ToggleList#HeaderTypography","content":"&lt;/&gt; ToggleList.HeaderTypography: Typography | FusionState | nil The Typography to be used for this component's header text  "},{"title":"BodyTypography​","type":1,"pageTitle":"ToggleList","url":"api/ToggleList#BodyTypography","content":"&lt;/&gt; ToggleList.BodyTypography: Typography | FusionState | nil The Typography to be used for this component's body text  "},{"title":"HeaderText​","type":1,"pageTitle":"ToggleList","url":"api/ToggleList#HeaderText","content":"&lt;/&gt; ToggleList.HeaderText: string | FusionState | nil The text used in the header  "},{"title":"Options​","type":1,"pageTitle":"ToggleList","url":"api/ToggleList#Options","content":"&lt;/&gt; ToggleList.Options: dictionary | FusionState | nil A table of string keys and associated bool values to be created into property frames  "},{"title":"Color​","type":1,"pageTitle":"ToggleList","url":"api/ToggleList#Color","content":"&lt;/&gt; ToggleList.Color: Color3 | FusionState | nil Color used for any relevant highlights in toggle input areas  "},{"title":"TextColor​","type":1,"pageTitle":"ToggleList","url":"api/ToggleList#TextColor","content":"&lt;/&gt; ToggleList.TextColor: Color3 | FusionState | nil Color used for all text  "},{"title":"ToggleVariant​","type":1,"pageTitle":"ToggleList","url":"api/ToggleList#ToggleVariant","content":"&lt;/&gt; ToggleList.ToggleVariant: ToggleVariant | FusionState | nil   "},{"title":"BackgroundColor​","type":1,"pageTitle":"ToggleList","url":"api/ToggleList#BackgroundColor","content":"&lt;/&gt; ToggleList.BackgroundColor: Color3 | FusionState | nil Color used for background of toggle elements  "},{"title":"Width​","type":1,"pageTitle":"ToggleList","url":"api/ToggleList#Width","content":"&lt;/&gt; ToggleList.Width: UDim | FusionState | nil Width of the entire component, as Height is solved using Typography  "},{"title":"Input​","type":1,"pageTitle":"ToggleList","url":"api/ToggleList#Input","content":"&lt;/&gt; ToggleList.Input: string | FusionState | nil When ToggleVariant = RadioButton, the selected key can be set here.  "},{"title":"Input​","type":1,"pageTitle":"ToggleList","url":"api/ToggleList#Input","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ToggleList.Input: string | FusionState | nil When ToggleVariant = RadioButton, the selected key will be displayed here.  "},{"title":"SynthClassName​","type":1,"pageTitle":"ToggleList","url":"api/ToggleList#SynthClassName","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ToggleList.SynthClassName: string Read-Only attribute used to identify what type of component it is "},{"title":"contributing","type":0,"sectionRef":"#","url":"docs/contributing","content":"","keywords":""},{"title":"Guidlines​","type":1,"pageTitle":"contributing","url":"docs/contributing#guidlines","content":"If you already wrote it and it doesn't match that's fine, I can just add it myself. Ideally though here's how custom components will work "},{"title":"I Don't Care If the Code is Messy​","type":1,"pageTitle":"contributing","url":"docs/contributing#i-dont-care-if-the-code-is-messy","content":"I honestly don't care if you're code's messy. Now don't get me wrong, if you can make your code readable and elegant go for it. But if you're worried about sending in some cool component you built just because I'll look down on you for it, don't worry about it. Just don't obfuscate it or anything lol. "},{"title":"Label Your GuiObjects​","type":1,"pageTitle":"contributing","url":"docs/contributing#label-your-guiobjects","content":"If you make an element composed of multiple GuiObjects, please give them unique names "},{"title":"All Public Properties, BindableEvents, and BindableFunctions are PascalCase​","type":1,"pageTitle":"contributing","url":"docs/contributing#all-public-properties-bindableevents-and-bindablefunctions-are-pascalcase","content":"That means the first letter of each word is capitalized and there aren't any underscores used. "},{"title":"Use Util.cornerRadius for non-circular UICorners​","type":1,"pageTitle":"contributing","url":"docs/contributing#use-utilcornerradius-for-non-circular-uicorners","content":"If you must deviate from it, at least use it within a Computed FusionState to adjust accordingly. "},{"title":"Content is where you leave room for miscellaneous GuiObject Additions​","type":1,"pageTitle":"contributing","url":"docs/contributing#content-is-where-you-leave-room-for-miscellaneous-guiobject-additions","content":"If you're making a component meant to hold other GuiObjects that aren't explicitly created by that component, then name the holding frame &quot;Content&quot;. An example of this would be like a ScrollingFrame. "},{"title":"Inputs & Values​","type":1,"pageTitle":"contributing","url":"docs/contributing#inputs--values","content":"User inputs should always be provided with an &quot;Input&quot; State, and the output should be a read-only &quot;Value&quot; state. It's mostly arbitrary, but various components need that kind of separation and I think this naming convention works okay. "},{"title":"Use Typography for Text, UICorner's, and Padding when possible​","type":1,"pageTitle":"contributing","url":"docs/contributing#use-typography-for-text-uicorners-and-padding-when-possible","content":"Whether you like them or not, Typography currently shapes much of the current UI scaling, so integrating the custom class into your components will allow them to fit in better. Don't use TextScaling for any text elements either. "},{"title":"I'm Not Super Strict on Use of Material Design​","type":1,"pageTitle":"contributing","url":"docs/contributing#im-not-super-strict-on-use-of-material-design","content":"The reality is Material was designed for webpages, not videogames. I understand that we can't always get an exact translation. So long as the UI fits the general vibe we've got going here I'm fine with that. "},{"title":"Just Fork this File​","type":1,"pageTitle":"contributing","url":"docs/contributing#just-fork-this-file","content":"If you could include any links / gifs of the final UI demo that would certainly be appreciated. Make sure you put your new UI Component under the Template folder. If you think it's a worth addition to a lower level one let me know, but for now I'm just going to assume everyone's making Template level stuff. "},{"title":"future","type":0,"sectionRef":"#","url":"docs/future","content":"","keywords":""},{"title":"Basic Stewardship​","type":1,"pageTitle":"future","url":"docs/future#basic-stewardship","content":"Improve documentation + include GIFs / images of components and their variantsImprove component appearance, performance, &amp; stabilityClean up the code to be a bit more readable, documented, and less hacky whenever possibleAdd more imperative functionality for existing elements. "},{"title":"New Features​","type":1,"pageTitle":"future","url":"docs/future#new-features","content":"Allow for the native calling of official material icons by name, as well as allowing for specifying filled / outlined variants.Allow for users to publish and easily subscribe / import other user's published components. "},{"title":"TextField","type":0,"sectionRef":"#","url":"api/TextField","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"TextField","url":"api/TextField#properties","content":" "},{"title":"ButtonVariant​","type":1,"pageTitle":"TextField","url":"api/TextField#ButtonVariant","content":"&lt;/&gt; TextField.ButtonVariant: ButtonVariant | FusionState | nil The style of construction as detailed here  "},{"title":"Typography​","type":1,"pageTitle":"TextField","url":"api/TextField#Typography","content":"&lt;/&gt; TextField.Typography: Typography | FusionState | nil The Typography to be used for this component  "},{"title":"Input​","type":1,"pageTitle":"TextField","url":"api/TextField#Input","content":"&lt;/&gt; TextField.Input: string | FusionState | nil The text currently filling the field.  "},{"title":"Context​","type":1,"pageTitle":"TextField","url":"api/TextField#Context","content":"&lt;/&gt; TextField.Context: string | FusionState | nil The text that goes below field and can provide extra info  "},{"title":"Error​","type":1,"pageTitle":"TextField","url":"api/TextField#Error","content":"&lt;/&gt; TextField.Error: string | FusionState | nil The text for any error message below the field  "},{"title":"Label​","type":1,"pageTitle":"TextField","url":"api/TextField#Label","content":"&lt;/&gt; TextField.Label: string | FusionState | nil The text that fills the blank text field as well as the section above the field when filled  "},{"title":"Prefix​","type":1,"pageTitle":"TextField","url":"api/TextField#Prefix","content":"&lt;/&gt; TextField.Prefix: string | FusionState | nil Text that is placed before any input text  "},{"title":"Suffix​","type":1,"pageTitle":"TextField","url":"api/TextField#Suffix","content":"&lt;/&gt; TextField.Suffix: string | FusionState | nil Text that is placed after any input text  "},{"title":"ImageRectSize​","type":1,"pageTitle":"TextField","url":"api/TextField#ImageRectSize","content":"&lt;/&gt; TextField.ImageRectSize: Vector2 | FusionState | nil How big the icon's sprite-sheet cells are  "},{"title":"LeadingImageRectOffset​","type":1,"pageTitle":"TextField","url":"api/TextField#LeadingImageRectOffset","content":"&lt;/&gt; TextField.LeadingImageRectOffset: Vector2 | FusionState | nil What position on a sprite-sheet should the leading icon be grabbed from  "},{"title":"LeadingImageRectSize​","type":1,"pageTitle":"TextField","url":"api/TextField#LeadingImageRectSize","content":"&lt;/&gt; TextField.LeadingImageRectSize: Vector2 | FusionState | nil How big the leading icon's sprite-sheet cells are  "},{"title":"LeadingImageRectSize​","type":1,"pageTitle":"TextField","url":"api/TextField#LeadingImageRectSize","content":"&lt;/&gt; TextField.LeadingImageRectSize: Vector2 | FusionState | nil How big the leading icon's sprite-sheet cells are  "},{"title":"TrailingImageRectOffset​","type":1,"pageTitle":"TextField","url":"api/TextField#TrailingImageRectOffset","content":"&lt;/&gt; TextField.TrailingImageRectOffset: Vector2 | FusionState | nil What position on a sprite-sheet should the trailing icon be grabbed from  "},{"title":"TrailingImageRectSize​","type":1,"pageTitle":"TextField","url":"api/TextField#TrailingImageRectSize","content":"&lt;/&gt; TextField.TrailingImageRectSize: Vector2 | FusionState | nil How big the trailing icon's sprite-sheet cells are  "},{"title":"CharacterLimit​","type":1,"pageTitle":"TextField","url":"api/TextField#CharacterLimit","content":"&lt;/&gt; TextField.CharacterLimit: number | FusionState | nil A basic limiter for text length  "},{"title":"BackgroundColor​","type":1,"pageTitle":"TextField","url":"api/TextField#BackgroundColor","content":"&lt;/&gt; TextField.BackgroundColor: Color3 | FusionState | nil Color used for background of text prompt  "},{"title":"Color​","type":1,"pageTitle":"TextField","url":"api/TextField#Color","content":"&lt;/&gt; TextField.Color: Color3 | FusionState | nil Color used for secondary highlighting  "},{"title":"LineColor​","type":1,"pageTitle":"TextField","url":"api/TextField#LineColor","content":"&lt;/&gt; TextField.LineColor: Color3 | FusionState | nil Color used for lines  "},{"title":"TextColor​","type":1,"pageTitle":"TextField","url":"api/TextField#TextColor","content":"&lt;/&gt; TextField.TextColor: Color3 | FusionState | nil Color used for basic text  "},{"title":"ErrorColor​","type":1,"pageTitle":"TextField","url":"api/TextField#ErrorColor","content":"&lt;/&gt; TextField.ErrorColor: Color3 | FusionState | nil Color used for errors  "},{"title":"LeadingIconColor​","type":1,"pageTitle":"TextField","url":"api/TextField#LeadingIconColor","content":"&lt;/&gt; TextField.LeadingIconColor: Color3 | FusionState | nil Color used for leading icon  "},{"title":"TrailingIconColor​","type":1,"pageTitle":"TextField","url":"api/TextField#TrailingIconColor","content":"&lt;/&gt; TextField.TrailingIconColor: Color3 | FusionState | nil Color used for trailing icon  "},{"title":"CensorText​","type":1,"pageTitle":"TextField","url":"api/TextField#CensorText","content":"&lt;/&gt; TextField.CensorText: bool | FusionState | nil Whether it runs text through Roblox filter  "},{"title":"FilterNumber​","type":1,"pageTitle":"TextField","url":"api/TextField#FilterNumber","content":"&lt;/&gt; TextField.FilterNumber: bool | FusionState | nil Whether it removes all numbers  "},{"title":"FilterLetter​","type":1,"pageTitle":"TextField","url":"api/TextField#FilterLetter","content":"&lt;/&gt; TextField.FilterLetter: bool | FusionState | nil Whether it removes all letters  "},{"title":"FilterSpacing​","type":1,"pageTitle":"TextField","url":"api/TextField#FilterSpacing","content":"&lt;/&gt; TextField.FilterSpacing: bool | FusionState | nil Whether it removes all spaces  "},{"title":"FilterDuplicateSpacing​","type":1,"pageTitle":"TextField","url":"api/TextField#FilterDuplicateSpacing","content":"&lt;/&gt; TextField.FilterDuplicateSpacing: bool | FusionState | nil Whether it removes all double spaces  "},{"title":"FilterSymbols​","type":1,"pageTitle":"TextField","url":"api/TextField#FilterSymbols","content":"&lt;/&gt; TextField.FilterSymbols: bool | FusionState | nil Whether it removes all non-letter &amp; number characters  "},{"title":"ForceUpper​","type":1,"pageTitle":"TextField","url":"api/TextField#ForceUpper","content":"&lt;/&gt; TextField.ForceUpper: bool | FusionState | nil Turns all text to uppercase  "},{"title":"ForceLower​","type":1,"pageTitle":"TextField","url":"api/TextField#ForceLower","content":"&lt;/&gt; TextField.ForceLower: bool | FusionState | nil Turns all text to lower case  "},{"title":"ForceFirstUpper​","type":1,"pageTitle":"TextField","url":"api/TextField#ForceFirstUpper","content":"&lt;/&gt; TextField.ForceFirstUpper: bool | FusionState | nil Sets text to lowercase, then converts each first letter to uppercase.  "},{"title":"Enabled​","type":1,"pageTitle":"TextField","url":"api/TextField#Enabled","content":"&lt;/&gt; TextField.Enabled: bool | FusionState | nil Whether it accepts input at this time  "},{"title":"Value​","type":1,"pageTitle":"TextField","url":"api/TextField#Value","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; TextField.Value: string The filtered input string  "},{"title":"SynthClassName​","type":1,"pageTitle":"TextField","url":"api/TextField#SynthClassName","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; TextField.SynthClassName: string Read-Only attribute used to identify what type of component it is "},{"title":"Util","type":0,"sectionRef":"#","url":"api/Util","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Util","url":"api/Util#properties","content":" "},{"title":"cornerRadius​","type":1,"pageTitle":"Util","url":"api/Util#cornerRadius","content":"&lt;/&gt; Util.cornerRadius: UDim  Where all the UICorners get their non circular corner radii. Can be set to something else should you like. "},{"title":"Functions​","type":1,"pageTitle":"Util","url":"api/Util#functions","content":" "},{"title":"newTypography​","type":1,"pageTitle":"Util","url":"api/Util#newTypography","content":"&lt;/&gt; Util.newTypography( font: Enum ,-- An official Roblox font enum minTextSize: number,-- the minimum height in pixels your text will be maxTextSize: number-- the maximum height in pixels your text will be ) → Typography-- typography state you can now pass through components Creates Typography classes for future use  "},{"title":"import​","type":1,"pageTitle":"Util","url":"api/Util#import","content":"&lt;/&gt; Util.import(stateOrVal: FusionState | any) → FusionState Takes a parameter and formats it into a FusionState  "},{"title":"getInteractionColor​","type":1,"pageTitle":"Util","url":"api/Util#getInteractionColor","content":"&lt;/&gt; Util.getInteractionColor( Clicked: FusionState,-- a boolean state that's true when the element is actived Hovered: FusionState,-- a boolean state that's true when the cursor hovers over the element Color: FusionState-- the base color ) → FusionState creates a FusionState that responds to the boolean Clicked and Hovered FusionStates  "},{"title":"initFusion​","type":1,"pageTitle":"Util","url":"api/Util#initFusion","content":"&lt;/&gt; Util.initFusion( Fusion: Fusion-- a constructed Fusion Library ) → FusionState A simple Fusion wrapper that adds some alternate syntax. This is a bad thing I do.  "},{"title":"getTypographyStates​","type":1,"pageTitle":"Util","url":"api/Util#getTypographyStates","content":"&lt;/&gt; Util.getTypographyStates( Typography: Typography-- a constructed Typography state ) → ( FusionState,-- A Padding UDim FusionState FusionState,-- A TextSize Number FusionState FusionState-- A Font Enum FusionState ) Unwraps a Typography class into 3 usable &amp; reactive property states  "},{"title":"set​","type":1,"pageTitle":"Util","url":"api/Util#set","content":"&lt;/&gt; Util.set( Constructor: function,-- the constructor the Configuration will be passed to PublicStates: {FusionState},-- dictionary of publicly accessible properties represented by FusionStates Parameters: {any},-- dictionary of externally provided values to be baked into Configuration Configuration: {any},-- the final table passed into the constructor maid: Maid | nil-- a maid handling the instance if one already exists. ) → Instance -- the constructed instance Handles the boring work of combining user params with pre-written configs as well as garbage collection.  "},{"title":"tween​","type":1,"pageTitle":"Util","url":"api/Util#tween","content":"&lt;/&gt; Util.tween( FusionState: FusionState,-- the FusionState to watch Parameters: TweenInfo | nil-- a table with keys matching of that of Roblox's TweenParams ) → FusionState-- The resulting tween A quick tween FusionState constructor. "},{"title":"intro","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"intro","url":"docs/intro#installation","content":"Add to your wally.toml file the synthetic release listed here: https://github.com/UpliftGames/wally-index/tree/main/nightcycle If you don't use wally this is your wake-up call to do so, however for those who don't want to go through the install process I'll be uploading a RBXM file whenever I make an announcement on the DevForum. "},{"title":"Components​","type":1,"pageTitle":"intro","url":"docs/intro#components","content":""},{"title":"Using within Studio​","type":1,"pageTitle":"intro","url":"docs/intro#using-within-studio","content":"As you may have guessed, in order to use this UI library on the client you need to require it on the client. Unlike most UI libraries, Synthetic also needs to be required by the server - this is because of the text filtering server dependencies. I might eventually update the relevant dependencies so this is not the case. "},{"title":"Constructing Components​","type":1,"pageTitle":"intro","url":"docs/intro#constructing-components","content":"To construct a Synthetic component you go about it the same was as with Fusion. local synthetic = require(modulePath) -- More readable, clearly shows how the first function returns a constructor local buttonConstructor = synthetic.New(&quot;Button&quot;) local button = buttonConstructor({ Text = &quot;Click me!&quot; }) -- More compact, easier to nest in a configuration table local button2 = synthetic.New(&quot;Button&quot;)({ Text = &quot;Click me!&quot; }) -- Most compact: it turns out you don't need parentheses to call a function local button3 = synthetic.New &quot;Button&quot; { Text = &quot;Click me!&quot; } Copy "},{"title":"Passing State to Components​","type":1,"pageTitle":"intro","url":"docs/intro#passing-state-to-components","content":"Like with Fusion, you can pass state and even Fusion flags through a Synthetic constructor, they'll local synthetic = require(modulePath) local _Text = fusion.State(&quot;Click me!&quot;) local button = synthetic.New &quot;Button&quot; { Text = _Text, [fusion.OnChange &quot;Activated&quot;] = function() _Text:set(&quot;I was clicked&quot;) --should change text on button end, } Copy "},{"title":"Properties​","type":1,"pageTitle":"intro","url":"docs/intro#properties","content":"Attributes are meant to serve as custom public-facing properties, allowing you easy configuration at later points using other scripts. Any non read-only property listed in the API will have an associated internal state that can be read from and written by changing the associated attribute. -- construction script local synthetic = require(modulePath) local _Input = fusion.State(false) -- it will be off upon construction local switch = synthetic.New &quot;Switch&quot; { Input = _Input, } -- other script local switch = gui:WaitForChild(&quot;Switch&quot;) switch:SetAttribute(&quot;Input&quot;, true) --should change the _Input state above to match local currentSwitch = switch:GetAttribute(&quot;Input&quot;) --gets the current _Input value, not _Input itself -- creating a mirroring State, though it will take a frame to update it and is a bit messy local _InputMirror = fusion.State(false) local maid = maidConstructor.new() --if you don't have a maid library, please get one. I use Quenty's maid:GiveTask(currentSwitch:GetAttributeChangedSignal(&quot;Input&quot;):Connect(function(val) _InputMirror:set(currentSwitch:GetAttribute(&quot;Input&quot;)) end)) Copy If you wish to keep a variable private, simply remove the attribute after construction but before you parent it. "},{"title":"Events​","type":1,"pageTitle":"intro","url":"docs/intro#events","content":"Various components also include BindableEvents which you may use as signal constructors. local synthetic = require(modulePath) local dialog = synthetic.New &quot;Dialog&quot; { Button1Text = &quot;No&quot;, Button2Text = &quot;Yes&quot;, } dialog.OnSelect:Connect(function(buttonText) --WaitForChild might be safer print(&quot;This was the button text of the selected button: &quot;, buttonText) end) Copy "},{"title":"Functions​","type":1,"pageTitle":"intro","url":"docs/intro#functions","content":"BindableEvents and BindableFunctions are both used to simulate calling a function on a component, with the main difference being if the function returns something it uses a BindableFunction local synthetic = require(modulePath) local display = synthetic.New &quot;Display&quot; { CameraPosition = Vector3.new(0,0,-4), } --let's put the player character in it local playerCharacter = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait() local vfController = display.InsertHumanoid:Invoke(playerCharacter) --RemoteFunction --let's hide this for later display.HideScene:Fire() --RemoteEvent Copy I originally considered using just BindableFunctions to keep the API consistent between function calls, but I felt that the comparably slow nature of them (they take at least 2x as long as BindableEvents) would be unnecessarily limiting. It can be tempting to make a pseudoclass wrapper for these kinds of functions and properties, and make them feel even more like regular native Roblox instances. Before you do that though, I ask that you consider what you may lose. In their current form any script or thread with access to the instance has full access to the functionality with no extra steps. This allows for more modular code, as well as encourages developers to create their components encapsulated. I think that's worth a bit of extra API. "},{"title":"Typography​","type":1,"pageTitle":"intro","url":"docs/intro#typography","content":"Some of you will hate this, and I'm sorry about that. I've constructed a custom Typography class. This class is a FusionState table composed of 3 calculated properties: TextSize, Font, and Padding. local synthetic = require(modulePath) local font = Enum.Fonts.SourceSans local minTextSize = 10 local maxTextSize = 14 local _ButtonTypography = synthetic.newTypography(font, minTextSize, maxTextSize) local button = synthetic.New &quot;Button&quot; { Text = &quot;Test&quot;, Typography = _Typography, } Copy Based on the dimensions of a person's screen, the Typography will solve for an ideal TextSize that will be used consistently across all instances of that TypographyState. The TextSize is also consistently used in padding. The benefits of using a set list of Typography across your UI is pretty compelling. For instance you could allow users with poor eyesite to increase the size of their text. The text scaling will also be consistent across UI components if you like. Finally, if you want to try out new fonts, it's very easy to check how it would all look. If Roblox ever supports custom font uploading, this library will certainly update to allow for that. "},{"title":"Adding Custom Components​","type":1,"pageTitle":"intro","url":"docs/intro#adding-custom-components","content":"If you want to add a custom component to your game, all you need to do is init that constructor when the client starts. local synthetic = require(modulePath) local key = &quot;myNewComponent&quot; function constructor(parameters: table | nil) --construct whatever you want and return it local inst return inst --if you want to add public attributes check out Util.set in API end synth.set(key, constructor) --any other script local inst = synth.New &quot;myNewComponent&quot;() Copy Eventually I might add some functionality to query whether a component exists, for now just run it in a pcall if you're facing a racing condition. "},{"title":"Useful Tools​","type":1,"pageTitle":"intro","url":"docs/intro#useful-tools","content":"Synthetic also has an Effects and a Util library, both of which could save you a bit of code in your own components. They aren't nearly as polished or well documented though, so use with caution. You can explore the exact methods available in their associated API pages. "}]